// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2T4eiDx1wGi8vZxKUZ7aY6
// Component: p6lhFh6y1-eG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 2T4eiDx1wGi8vZxKUZ7aY6/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: p6lhFh6y1-eG/css

import TelegramSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__TelegramSvgrepoCom1Svg"; // plasmic-import: COlfhFkd-lQB/icon
import Twitter3SvgrepoComsvgIcon from "./icons/PlasmicIcon__Twitter3SvgrepoComsvg"; // plasmic-import: ET0ykgw7RZ3R/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  h5?: Flex__<"h5">;
  h6?: Flex__<"h6">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bq3Yn
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__pQ76T)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/swike/images/swikeLogopng.png",
                    fullWidth: 922,
                    fullHeight: 434,
                    aspectRatio: undefined
                  }}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sP3Tp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ndQ0M)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__apZfG
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <TelegramSvgrepoCom1SvgIcon
                    className={classNames(projectcss.all, sty.svg___5UY9Q)}
                    role={"img"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4RwwJ
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Twitter3SvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__cYyEg)}
                    role={"img"}
                  />
                </PlasmicLink__>
              </Stack__>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fYIp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <section className={classNames(projectcss.all, sty.section__lQ33D)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__eHfiZ)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"500px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/swike/images/swikeLogopng.png",
                fullWidth: 922,
                fullHeight: 434,
                aspectRatio: undefined
              }}
            />

            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__f0YYi
              )}
            >
              {"Dive into the world of SWIKE"}
            </h3>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ibIoY)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/swike/images/pepracingpng.png",
                fullWidth: 1024,
                fullHeight: 1024,
                aspectRatio: undefined
              }}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section__rCyxm)}>
            <div className={classNames(projectcss.all, sty.columns__cwvq8)}>
              <div className={classNames(projectcss.all, sty.column__jaQao)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__v7Vp0)}
                  direction={"left"}
                  triggerOnce={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__iOmlv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/swike/images/swikeridepng2.png",
                      fullWidth: 1034,
                      fullHeight: 892,
                      aspectRatio: undefined
                    }}
                  />
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.column__ewpOt)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__nF5D9)}
                  triggerOnce={true}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__r1WQl)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__i7Hkv
                      )}
                    >
                      {"Introducing $SWIKE"}
                    </h1>
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      {
                        '"Dive into the world of SWIKE, the meme coin that combines the freedom of riding with the excitement of crypto. Alongside Pepe, the daring brown frog, we\'re not just riding to live, but living to ride... on the Solana blockchain! Join our community and be part of the meme coin revolution with an undying spirit."'
                      }
                    </h5>
                  </Stack__>
                </Reveal>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___9ArbU)}>
            <div className={classNames(projectcss.all, sty.columns__zdRZa)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__ypGq9)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__xv8A9)}
                  direction={"up"}
                  triggerOnce={true}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__r4IPh)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__mh305
                      )}
                    >
                      {"Total Supply"}
                    </h3>
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__eCkci
                      )}
                    >
                      {"1.000.000.000"}
                    </h1>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___5IyfE
                      )}
                    >
                      {"50% Pool"}
                    </h3>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__glqCk
                      )}
                    >
                      {"50% Development, Marketing, Partnership"}
                    </h3>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__olxp)}
                    >
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__d7Xcv
                        )}
                      >
                        {"LP Burn"}
                      </h4>
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__mv6Rm
                        )}
                      >
                        {"Mint Revoke"}
                      </h4>
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__l11Qm
                        )}
                      >
                        {"Contract Renounced"}
                      </h4>
                    </Stack__>
                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6
                      )}
                    >
                      {
                        "Rewards: Our community will enjoy rewards through airdrops, competitions, and group rides"
                      }
                    </h6>
                  </Stack__>
                </Reveal>
              </Stack__>
              <div className={classNames(projectcss.all, sty.column__kparn)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__v6CyN)}
                  direction={"down"}
                  triggerOnce={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dn2Wg)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/swike/images/swikeMoneypng.png",
                      fullWidth: 1024,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </Reveal>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___5NxOo)}>
            <div className={classNames(projectcss.all, sty.freeBox__azAo1)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iEdJd)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/swike/images/bannerSwikepng.png",
                  fullWidth: 800,
                  fullHeight: 260,
                  aspectRatio: undefined
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__znlnv)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jntWg
                  )}
                >
                  {"Join our community"}
                </h1>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2YCwr)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__m29Ji
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <TelegramSvgrepoCom1SvgIcon
                      className={classNames(projectcss.all, sty.svg__gpJfd)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___277Gc
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <Twitter3SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__laHb)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                </Stack__>
              </Stack__>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "h5", "h6"],
  navigationBar: ["navigationBar"],
  h5: ["h5"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  h5: "h5";
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    h5: makeNodeComponent("h5"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
